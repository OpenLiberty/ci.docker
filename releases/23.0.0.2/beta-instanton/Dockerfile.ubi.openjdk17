FROM registry.access.redhat.com/ubi8/ubi:latest

ARG LIBERTY_VERSION=23.0.0.3-beta
ARG LIBERTY_SHA=da39a3ee5e6b4b0d3255bfef95601890afd80709
ARG LIBERTY_BUILD_LABEL=cl230220230222-1257
ARG LIBERTY_DOWNLOAD_URL=https://repo1.maven.org/maven2/io/openliberty/beta/openliberty-runtime/$LIBERTY_VERSION/openliberty-runtime-$LIBERTY_VERSION.zip
ARG OPENJ9_SCC=true
ARG VERBOSE=false

LABEL org.opencontainers.image.authors="Thomas Watson, Michal Broz" \
      org.opencontainers.image.vendor="Open Liberty" \
      org.opencontainers.image.url="https://openliberty.io/" \
      org.opencontainers.image.source="https://github.com/OpenLiberty/ci.docker" \
      org.opencontainers.image.revision="$LIBERTY_BUILD_LABEL" \
      org.opencontainers.image.description="This image contains the Open Liberty InstantOn beta runtime with IBM Semeru Runtime Open Edition OpenJDK 17 with OpenJ9 and UBI 8 as the base OS.  For more information on this image please see https://github.com/OpenLiberty/ci.docker#building-an-application-image" \
      org.opencontainers.image.title="Open Liberty InstantOn Beta" \
      org.opencontainers.image.version="$LIBERTY_VERSION"

RUN set -eu; \
    dnf install -y \
# CRIU dependencies
       iptables-libs jansson libibverbs libmnl libnet libnftnl libpcap nftables protobuf-c \
# Semeru dependencies
       tzdata openssl curl ca-certificates fontconfig glibc-langpack-en tar; \
    dnf clean all; \
    useradd -u 1001 -r -g 0 -s /usr/sbin/nologin default;

RUN set -eu; \
    CRIU_DIR_URL=https://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/criu-build/b6; \
    CRIU_SHA=54121c8a1def17f702a26f36c33206b126a15b9b0f81bbc98809f5097bbbfd8c; \
    CRIU_LIB_SHA=6aef6ae20062c64962b89591ee18b58a748d16b11101694c96677bad93704504; \
    echo "downloading ${CRIU_DIR_URL}/criu"; \
    curl -LfsSo /usr/sbin/criu ${CRIU_DIR_URL}/criu; \
    echo "$CRIU_SHA */usr/sbin/criu" | sha256sum -c -; \
    echo "downloading ${CRIU_DIR_URL}/libcriu.so"; \
    curl -LfsSo /usr/lib64/libcriu.so.2.0 ${CRIU_DIR_URL}/libcriu.so.2.0; \
    echo "$CRIU_LIB_SHA */usr/lib64/libcriu.so.2.0" | sha256sum -c -; \
    chmod a+x /usr/sbin/criu; \
    setcap cap_checkpoint_restore,cap_sys_ptrace,cap_setpcap=eip /usr/sbin/criu; \
    mkdir -p /opt/criu; \
    cp /usr/sbin/criu /opt/criu/criu; \
    setcap cap_checkpoint_restore,cap_setpcap=eip /opt/criu/criu; \
    cd /usr/lib64; \
    ln -s libcriu.so.2.0 libcriu.so; \
    ln -s libcriu.so.2.0 libcriu.so.2; \
    cd /;

ENV JAVA_VERSION jdk-17.0.4.1+1

ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

# Requirements to install Java

# TODO set the URLs for each arch
 RUN set -eux; \
    ARCH="$(uname -m)"; \
    case "${ARCH}" in \
       aarch64|arm64) \
         ESUM='junk'; \
         BINARY_URL='junk'; \
         ;; \
       ppc64el|ppc64le) \
         ESUM='junk'; \
         BINARY_URL='junk'; \
         ;; \
       s390x) \
         ESUM='junk'; \
         BINARY_URL='junk'; \
         ;; \
       amd64|x86_64) \
         ESUM='22ebde695ebaa979187242b859349065b82e78cc7b6ca7c2c267320e604caf83'; \
         BINARY_URL='https://github.com/ibmruntimes/semeru17-ea-binaries/releases/download/jdk-17.0.6%2B10_february_23-preview_1/ibm-semeru-open-ea-jdk_x64_linux_17.0.6_10_February_23-preview_1.tar.gz'; \
         ;; \
       *) \
         echo "Unsupported arch: ${ARCH}"; \
         exit 1; \
         ;; \
    esac; \
    curl -LfsSo /tmp/openjdk.tar.xz ${BINARY_URL}; \
    echo "${ESUM} */tmp/openjdk.tar.xz" | sha256sum -c -; \
    mkdir -p /opt/java/openjdk; \
    cd /opt/java/openjdk; \
    tar -xf /tmp/openjdk.tar.xz --strip-components=1; \
    rm -rf /tmp/openjdk.tar.xz;

ENV JAVA_HOME=/opt/java/openjdk \
    PATH="$PATH:/opt/java/openjdk/bin"
ENV JAVA_TOOL_OPTIONS="-XX:+IgnoreUnrecognizedVMOptions -XX:+IdleTuningGcOnIdle -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,readonly,nonFatal"

# Install Open Liberty
RUN set -eux; \
    yum -y install wget unzip; \
    wget -q $LIBERTY_DOWNLOAD_URL -U UA-Open-Liberty-Docker -O /tmp/wlp.zip; \
    echo "$LIBERTY_SHA  /tmp/wlp.zip" > /tmp/wlp.zip.sha1; \
    sha1sum -c /tmp/wlp.zip.sha1; \
    unzip -q /tmp/wlp.zip -d /opt/ol; \
    rm /tmp/wlp.zip; \
    rm /tmp/wlp.zip.sha1; \
    mkdir -p /licenses; \
    cp /opt/ol/wlp/LICENSE /licenses/; \
    wget -O /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.5/dumb-init_1.2.5_x86_64; \
    chmod +x /usr/bin/dumb-init; \
    yum -y remove wget unzip; \
    yum clean all; \
    chown -R 1001:0 /opt/ol/wlp; \
    chmod -R g+rw /opt/ol/wlp;

COPY NOTICES /opt/NOTICES
COPY helpers /opt/ol/helpers
COPY fixes/ /opt/ol/fixes/

# Set Path Shortcuts
ENV PATH=$PATH:/opt/ol/wlp/bin:/opt/ol/helpers/build \
    LOG_DIR=/logs \
    WLP_OUTPUT_DIR=/opt/ol/wlp/output \
    WLP_SKIP_MAXPERMSIZE=true \
    OPENJ9_SCC=$OPENJ9_SCC \
    WLP_IN_CONTAINER=true


# Configure Open Liberty
RUN /opt/ol/wlp/bin/server create --template=javaee8 \
    && rm -rf $WLP_OUTPUT_DIR/.classCache /output/workarea \
    && rm -rf /opt/ol/wlp/usr/servers/defaultServer/server.env

# Create symlinks && set permissions for non-root user
RUN mkdir /logs \
    && mkdir -p /opt/ol/wlp/usr/shared/resources/lib.index.cache \
    && ln -s /opt/ol/wlp/usr/shared/resources/lib.index.cache /lib.index.cache \
    && mkdir -p $WLP_OUTPUT_DIR/defaultServer \
    && ln -s $WLP_OUTPUT_DIR/defaultServer /output \
    && ln -s /opt/ol/wlp/usr/servers/defaultServer /config \
    && mkdir -p /config/configDropins/defaults \
    && mkdir -p /config/configDropins/overrides \
    && mkdir -p /config/dropins \
    && mkdir -p /config/apps \
    && ln -s /opt/ol/wlp /liberty \
    && chown -R 1001:0 /config \
    && chmod -R g+rw /config \
    && chown -R 1001:0 /logs \
    && chmod -R g+rw /logs \
    && chown -R 1001:0 /opt/ol/wlp/usr \
    && chmod -R g+rw /opt/ol/wlp/usr \
    && chown -R 1001:0 /opt/ol/wlp/output \
    && chmod -R g+rw /opt/ol/wlp/output \
    && chown -R 1001:0 /opt/ol/helpers \
    && chmod -R g+rw /opt/ol/helpers \
    && chown -R 1001:0 /opt/ol/fixes \
    && chmod -R g+rwx /opt/ol/fixes \
    && mkdir /etc/wlp \
    && chown -R 1001:0 /etc/wlp \
    && chmod -R g+rw /etc/wlp \
    && echo "<server description=\"Default Server\"><httpEndpoint id=\"defaultHttpEndpoint\" host=\"*\" /></server>" > /config/configDropins/defaults/open-default-port.xml \
    && echo "<server><featureManager><feature>checkpoint-1.0</feature></featureManager></server>" > /config/configDropins/defaults/checkpoint.xml

# Create a new SCC layer
RUN if [ ! -d "/opt/java/.scc" ]; then mkdir /opt/java/.scc; chmod -R 0777 /opt/java/.scc; fi \
    && if [ "$OPENJ9_SCC" = "true" ]; then populate_scc.sh; fi \
    && rm -rf /output/messaging /output/resources/security /logs/* $WLP_OUTPUT_DIR/.classCache \
    && chown -R 1001:0 /opt/ol/wlp/output \
    && chmod -R g+rwx /opt/ol/wlp/output

#These settings are needed so that we can run as a different user than 1001 after server warmup
ENV RANDFILE=/tmp/.rnd \
    OPENJ9_JAVA_OPTIONS="-XX:+IgnoreUnrecognizedVMOptions -XX:+IdleTuningGcOnIdle -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,readonly,nonFatal -Dosgi.checkConfiguration=false"

USER 1001

EXPOSE 9080 9443

ENTRYPOINT ["/opt/ol/helpers/runtime/docker-server.sh"]
CMD ["/opt/ol/wlp/bin/server", "run", "defaultServer"]

